env_name: !!str CartPole-v0                 # used environment: Pendulum-v0, MountainCarContinuous-v0, Test, HalfCheetah-v2
seed: !!int 20                               # random initialization seed
render_env: !!bool True                    # render environment

agents:
  gtn:
    max_iterations: !!int 10                # maximum number of GTN iterations
    step_size: !!float 0.1                  # reptile step size when matching the agent to the real environment
    agent_name: !!str TD3                   # which RL agent to use for meta-training
    mod_zero_rate: !!int 2                  # use unmodified environment every i-th round

  reptile:
    max_iterations: !!int 10000             # maximum number of REPTILE iteration
    step_size: !!float 0.1                  # step size when updating the model parameters
    agent_name: !!str TD3                   # which RL agent to use for meta-training

  ddqn:
    max_episodes: !!int 10000               # maximum number of episodes to optimize
    init_episodes: !!int 1                  # number of episodes to fill the replay buffer
    batch_size: !!int  128                  # batch size when running a policy update step
    gamma: !!float 0.99                     # discount factor
    lr: !!float 1e-3                        # learning rate
    tau: !!int 100                          # target network update rate
    eps_init: !!float 1
    eps_min: !!float 0.01
    eps_decay: !!float 0.9
    rb_size: !!int 1000                     # size of the replay buffer
    same_action_num: !!int 1                # how often to perform the same action subsequently
    activation_fn: !!str relu               # activation function for actor/critic ('tanh', 'relu', 'leakyrelu' or 'prelu')
    hidden_size: !!int 128                  # size of the actor/critic hidden layer
    hidden_layer: !!int 1                   # number of hidden layers
    weight_norm: !!bool False               # use weight normalization
    early_out_num: 5                        # based on how many training steps shall an early out happen

  td3:
    max_episodes: !!int 100                 # maximum number of episodes to optimize
    init_episodes: !!int 25                 # number of episodes to fill the replay buffer
    batch_size: !!int  256                  # batch size when running a policy update step
    gamma: !!float 0.99                     # discount factor
    lr: !!float 1e-3                        # learning rate
    tau: !!float 0.01                       # target network update rate
    policy_delay: !!int 2                   # frequency of delayed policy updates
    rb_size: !!int 1000000                  # size of the replay buffer
    same_action_num: !!int 1                # how often to perform the same action subsequently
    activation_fn: !!str relu               # activation function for actor/critic ('tanh', 'relu', 'leakyrelu' or 'prelu')
    hidden_size: !!int 256                  # size of the actor/critic hidden layer
    hidden_layer: !!int 2                   # number of hidden layers
    weight_norm: !!bool False               # use weight normalization
    action_std: !!float 0.1                 # action noise standard deviation
    policy_std: !!float 0.2                 # policy noise standard deviation
    policy_std_clip: !!float 0.5            # policy noise standard deviation
    early_out_num: 5                        # based on how many training steps shall an early out happen
    mod_delay: !!int 2                      # update delay of td3_mod
    mod_type: !!int 4                       # 0: none / 1: positive Q-function gradient / 2: negative Q-function gradient / 3: random noise / 4: multiplicative factor
    mod_grad_type: !!int 1                  # 1: gradient descent / 2: normalized step size / 3: inverse step size
    mod_grad_step_size: !!float 0.05        # Q-function modulation step size
    mod_grad_steps: !!int 2                 # number of gradient steps when modifying
    mod_noise_type: !!int 2                 # 1: gaussian / 2: uniform
    mod_noise_std: !!float 0.1              # noise intensity
    mod_add_factor: !!float 0.1             # multiplicative factor used to modify the actions
    mod_mult_const: !!bool True             # noise intensity

  ppo:
    max_episodes: !!int 100000              # maximum number of episodes to optimize
    update_episodes: !!float 20             # update policy every x episodes (can be float)
    ppo_epochs: !!int 100                   # update policy for x epochs
    gamma: !!float 0.99                     # discount factor
    lr: !!float 1e-3                        # learning rate
    weight_decay: !!float 0                 # weight decay
    vf_coef: !!float 0.5                    # value function coefficient (see PPO paper)
    ent_coef: !!float 0.01                  # entropy coefficient (see PPO paper)
    eps_clip: !!float 0.2                   # trust region size (see PPO paper)
    same_action_num: !!int 1                # how often to perform the same action subsequently
    activation_fn: !!str leakyrelu          # activation function for actor/critic ('tanh', 'relu', 'leakyrelu' or 'prelu')
    hidden_size: !!int 128                  # size of the actor/critic hidden layer
    hidden_layer: !!int 1                   # number of hidden layers
    weight_norm: !!bool False               # use weight normalization
    action_std: !!float 0.5                 # action noise standard deviation
    early_out_num: 50                       # based on how many training steps shall an early out happen

envs:
  Pendulum-v0:
    solved_reward: !!float -300             # used for early out in RL agent training
    max_steps: !!int 200                    # maximum number of steps per episode
    dt: !!float 0.05                        # sampling rate
    max_speed: [8, 10, 12, False]           # maximum joint speed [min, default, max, larger=more difficult]
    max_torque: [1.5, 2, 3, False]          # maximum joint torque [min, default, max, larger=more difficult]
    g: [5, 10, 15, True]                    # gravitational constant [min, default, max, larger=more difficult]
    m: [0.5, 1, 1.2, True]                  # joint mass [min, default, max, larger=more difficult]
    l: [0.5, 1, 1.2, True]                  # joint length [min, default, max, larger=more difficult]

  MountainCarContinuous-v0:
    solved_reward: !!float 80               # used for early out in RL agent training
    max_steps: !!int 999                    # maximum number of steps per episode REMOVE
    max_speed: [0.05, 0.07, 0.1, False]     # maximum allowed vehicle velocity
    power: [0.001, 0.0015, 0.002, False]    # strength of the vehicle engine
    goal_position: [0.45, 0.45, 0.5, True]  # x-value? of goal position
    goal_velocity: [0.0, 0.0, 0.05, True]   # minimum velocity when reaching the goal

  HalfCheetah-v2:
    solved_reward: !!float 500              # used for early out in RL agent training
    max_steps: !!int 500                    # maximum number of steps per episode
    g: [-0.2, -9.81, -50, True]             # gravitational constant along negative z-axis [min, default, max, larger=more difficult]
    cripple_joint: !!bool False             # randomly sample a joint to be disabled (the agent cannot apply torques to that joint)

  CartPole-v0:
    solved_reward: !!float 198
    max_steps: !!int 200

