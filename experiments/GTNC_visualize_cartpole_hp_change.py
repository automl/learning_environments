import os
import torch
import statistics
import time
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from envs.env_factory import EnvFactory
from agents.agent_utils import select_agent
from utils import ReplayBuffer

BIN_WIDTH = 0.02
SHOW_PLOT = True

def load_envs_and_config(dir, file_name):
    file_path = os.path.join(dir, file_name)
    save_dict = torch.load(file_path)
    config = save_dict['config']
    # config['envs']['CartPole-v0']['solved_reward'] = 195
    # config['envs']['CartPole-v0']['max_steps'] = 200
    env_factory = EnvFactory(config=config)
    virtual_env = env_factory.generate_virtual_env()
    virtual_env.load_state_dict(save_dict['model'])
    real_env = env_factory.generate_default_real_env()

    _, gtn_it, _ = file_name.split('_')

    return virtual_env, real_env, config, gtn_it


def barplot_variation_hyperparameters():
    normal = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 163.0, 181.0, 200.0, 200.0, 149.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 196.0, 154.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]
    half_hidden_size = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 196.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 10.0, 11.0, 18.0, 10.0, 10.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 186.0, 167.0, 172.0, 200.0, 60.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 114.0, 156.0, 152.0, 152.0, 153.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]
    double_hidden_size = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 148.0, 127.0, 87.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 198.0, 181.0, 200.0, 200.0, 168.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 148.0, 136.0, 139.0, 146.0, 140.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]
    half_hidden_layer = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 199.0, 149.0, 76.0, 200.0, 200.0, 200.0, 137.0, 200.0, 200.0, 200.0, 200.0, 10.0, 65.0, 92.0, 46.0, 68.0, 174.0, 10.0, 10.0, 9.0, 10.0, 9.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 170.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 199.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 189.0, 200.0, 200.0, 200.0, 200.0, 200.0, 199.0, 200.0, 200.0, 200.0, 200.0, 199.0, 200.0, 199.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]
    double_hidden_layer = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 131.0, 120.0, 111.0, 134.0, 136.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 118.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 160.0, 138.0, 197.0, 185.0, 200.0, 169.0, 162.0, 200.0, 182.0, 200.0, 200.0, 200.0, 200.0, 200.0, 178.0, 200.0, 200.0, 200.0, 152.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]
    half_learning_rate = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 194.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 181.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 168.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 163.0, 182.0, 176.0, 200.0, 200.0, 200.0, 188.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 173.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]
    double_learning_rate = [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 155.0, 149.0, 122.0, 171.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 115.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 180.0, 160.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 168.0, 162.0, 142.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 176.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 182.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]

    print(len(normal))

    data_dict = {'normal': normal,
                 'half hidden size': half_hidden_size,
                 'double hidden size': double_hidden_size,
                 'half hidden layer': half_hidden_layer,
                 'double hidden layer': double_hidden_layer,
                 'half learning rate': half_learning_rate,
                 'double learning rate': double_learning_rate}
    df = pd.DataFrame(data=data_dict)
    plt.subplots(dpi=600, figsize=(5,4))
    #ax = sns.stripplot(data=df, alpha=0.5)

    mean = []
    for value in data_dict.values():
        mean.append(statistics.mean(value))

    plt.plot(mean, linewidth=2)

    ax = sns.boxplot(data=df)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)

    plt.ylabel('cumulative reward')
    plt.ylim([0, 260])
    plt.legend(['mean cumulative reward'])

    #plt.title('GTN cartpole parameter variation (10 different agents, 10 evals each agent)')
    plt.show()

if __name__ == "__main__":
    dir = '/home/dingsda/master_thesis/learning_environments/results/GTN_models_CartPole-v0'
    # file_names = ['CartPole-v0_3_41PJSO.pt', 'CartPole-v0_4_RXXFAN.pt', 'CartPole-v0_6_88CD40.pt', 'CartPole-v0_8_K1WJ69.pt', 'CartPole-v0_9_W02707.pt',
    #               'CartPole-v0_10_JYY4GI.pt', 'CartPole-v0_18_E41JRQ.pt', 'CartPole-v0_19_8A0F9A.pt', 'CartPole-v0_21_UPUH33.pt', 'CartPole-v0_24_I8EZDI.pt']
    file_names = ['CartPole-v0_4_RXXFAN.pt', 'CartPole-v0_8_K1WJ69.pt', 'CartPole-v0_10_JYY4GI.pt','CartPole-v0_19_8A0F9A.pt', 'CartPole-v0_24_I8EZDI.pt']

    reward_list = []

    if SHOW_PLOT:
        barplot_variation_hyperparameters()

    else:
        for file_name in file_names:
            virtual_env, real_env, config, gtn_it = load_envs_and_config(dir=dir, file_name=file_name)
            print(config)
            config['device'] = 'cuda'
            config['agents']['ddqn']['print_rate'] = 1
            config['agents']['ddqn']['test_episodes'] = 5
            #config['agents']['ddqn']['hidden_size'] = int(config['agents']['ddqn']['hidden_size']*2)
            #config['agents']['ddqn']['hidden_layer'] = int(config['agents']['ddqn']['hidden_layer']*2)
            #config['agents']['ddqn']['lr'] = config['agents']['ddqn']['lr']*2

            replay_buffer_train_all = ReplayBuffer(state_dim=4, action_dim=1, device='cpu')
            replay_buffer_test_all = ReplayBuffer(state_dim=4, action_dim=1, device='cpu')

            for i in range(5):
                print(i)
                agent = select_agent(config=config, agent_name='DDQN')
                _, replay_buffer_train = agent.train(env=virtual_env, gtn_iteration=gtn_it)
                reward, replay_buffer_test = agent.test(env=real_env)
                replay_buffer_train_all.merge_buffer(replay_buffer_train)
                replay_buffer_test_all.merge_buffer(replay_buffer_test)
                reward_list += reward

        print(reward_list)
